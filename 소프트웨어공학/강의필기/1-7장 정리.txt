1장 소프트웨어공학 소개

  1. 목적: 최소의 비용으로 품질 좋은 소프트웨어를 만들기 위한 목적
  2. Algorithm
	정의: 어떤 일을 수행하기 위한 명령어의 논리적 순서
	조건: 순서가 있어야하고 , 모호하지 않아야 하고, 잘 실행되어야 하며 결과가 잘 나와야 한다.
  3. software 개발 전 고려사항

2장 주석, 자료구조, 컴파일러 인터프리터, GC
  1. 주석
	좋은 주석
		법적인 주석
		정보를 제공하는 주석  --> 자신의 생각을 기록하는 것
		의도를 설명하는 주석
		의미를 명료하게 밝히는 주석  --> 상수에 대한 설명
		결과를 경고하는 주석
		todo 주석
		중요성을 강조하는 주석
	나쁜 주석
		같은 이야기를 중복하는 주석	
		오해할 여지가 있는 주석
		의무적으로 다는 주석 --> 코드에서 유추할 수 있는 내용의 주석
		이력을 기록하는 주석
		있으나 마나 한 주석	
		위치를 표시하는 주석	
		닫는 괄호에 다는 주석
		주석으로 처리한 코드
		너무 많은 정보  --> 설명 자체를 위한 설명 
  2. 자료구조의 종류
	비트마스크
	선형 자료구조(동적배열, 연결 리스트)
		-동적배열
			배열의 특징을 가짐
			주어진 위치에 대한 원소 반환
			배열의 크기 변경가능
		-연결 리스트
			배열의 원소들의 순서를 유지하면서 임의의 위치에 원소 삽입, 삭제를 수행
		-자료구조의 선택 기준
			시간 복잡도 linkedlist< ArrayList(linkedlist가 더 빠르다)
			공간 복잡도 linkedlist>ArrayList(ArrayList가 공간이 더 적게 든다)
	큐,스택,데크
		-연결 리스트를 통한 구현
			양쪽 끝에서의 삽입, 삭제가 상수 시간에 가능
			하지만, 노드의 할당, 삭제, 접근 등에 시간이 걸림
		-동적 배열을 통한 구현
			스택의 경우 쉽게 구현가능
			큐,데크의 경우 삽입, 삭제 시 시간이 O(n) 시간 소요
  3. 컴파일러와 인터프리터
	컴파일러 
		high level language(고급언어)를 machine language(기계언어)로 해석한다.
	인터프리터
		프로그램(고급언어)과 기계어의 중간 코드로 생성하여 그 중간 코드를 해석 실행하는 번역 프로그램
		목적 프로그램을 출력하지 않는 것이 컴파일러와 크게 구분된다.
	JLT컴파일러
		인터프리트 방식과 컴파일러 방식을 혼합한 방식이며 실행 시점에서 인터프리트 방식으로 기계어 코드를 생성하면서 그 코드를 캐싱하여 같은 함수가 여러 번 불릴 때 매번 기계어 코드를 생성하는 것을 방지
		JVM에서 지원하고 자바 컴파일러가 프로그램 코드를 바이트 코드로(중간 코드)로 변환한 다음, 실제 바이트 코드를 실행하는 시점에서 바이트 코드를 JLT 컴파일을 통해 기계어로 변환
  4. 메모리 관리
	garbage collection: 오랫동안 사용되지 않는 object가 차지하고 있는 메모리를 재활용한다.
	GC 처리 방법
		Reference Counting
			각 object는 reference 횟수를 세서 만약 object의 횟수가 0이면 garbage가 된다.
			장점
				상대적으로 구현이 쉽다.
			단점
				모든 garbage object가 free 된다고 보장할 수 없다.
				overhead가 발생한다.
		Mark and Sweep
			roots에서부터 object를 스캔하면서 mark한다.
			mark되지 않은 object를 heap에서 제거하는 방식
			장점
				구현과 개념이 쉽고 모든 garbage object가 free된다고 보장한다.
			단점
				cpu를 많이 사용해야한다
				GC가 실행되는 동안 모든 thread가 멈춰야한다.
		Copy Colleciton
			heap을 start공간과 end 공간으로 나눈다.
			object는 start 공간에 할당된다.
			GC가 수행되는 동안 marking 대신에 사용하는 object를 복사해 end space로 옮긴다.
			장점
				garbage를 free하기 위해서 스캔할 필요가 없다.
				fragmentation이 없다.
			단점
				느리다
				GC가 실행되는 동안 모든 thread가 멈춰야한다.

		Generational Collection
			Object 생명주기는 garbage가 될 가능성과 반비례하는 경향이 있다.
			young object는 빠르게 죽고 old object는 계속 살아있다.
		 	이런 객체 생성패턴을 이용한다.
5장 소프트웨어 생명주기  

  1. 소프트웨어 생명주기(SDLC) : 소프트웨어를 개발하는 절차 및 개발 단계의 반복현상
	정의 단계
		타당성 검토
			법적 타당성: 법적으로 타당한지 검토 
			경제적 타당성: 경제적으로 타당한지 검토
			기술적 타당성 : 할 수 있는 기술인지 검토
		프로젝트 계획
			자원, 범위, 비용 측정을 해서 위험성 최소화
			소프트웨어를 개발하기 위해 준비하는 과정
		요구분석
			사용자가 요구하는 것이 무엇인지 알아야한다.
	개발 단계
		설계
			절차구조, 알고리즘, 자료구조 등을 작성하여 프로그램을 쉽게 구현할 수 있도록 준비한는 단계
			자연언어와 프로그램 설계용 언어를 사용
			오류가 가장 많은 단계
		구현
			설계단계에서 작성된 설계문서를 기초로하여 컴퓨터 처리가 가능한 프로그램 언어로 코딩하고 번역하는 단계
		검사
			오류를 찾아 수정하는 단계
	유지보수 단계
		가장 많은 시간과 비용이 투입된다.
		하자보수, 기능개선, 예방조치 등이 있다.
  2. 생명주기 역할
	사용자와 개발자 간에 공동 의식을 가질 수 있다.
	소프트웨어 개발의 기본 골격으로 개발 진행의 파악이 용이하다
	개발된 소프트웨어를 관리하기에 용이하다
	용어 및 기술의 표준화를 가능하게한다( 문서화)
  3. 생명주기 모형
	-폭포수 모형(waterfall)
		요구분석 -> 설계 -> 구현 -> 검사 -> 유지보수
		특징
			각 단계가 순차적으로 진행되며 같이 진행될 수 없다.
			각 단계에서 완벽하게 검토하도록 한다.(명확성 강조)
	-프로토타입 모형
		요구분석 -> 프로토타입 -> 설계 -> 구현 -> 검사 -> 유지보수
			  요구수집 -> 빠른 설계 -> 프로토타입 구축 -> 고객평가 -> 프로토타입 조정 -> 구현
		특징
			소프트웨어의 일부를 미리 제작하여 사용자의 요구를 정확히 받아들이는 방법이다.
			요구사항의 변경이 용이하다.
			최종결과물이 나오기 전에 의뢰자가 최종 결과물의 일부 또는 모형을 볼 수 있다.
 	-Agile
		a. Agile이란?
			과거의 방법론과는 다르게 앞을 예측하며 개발을 하지 않고, 일정한 주기를 가지고 끊임없이 프로토타입을 만들어
			그때 그때 필요한 요구를 더하고 수정하여 하나의 커다란 소프트웨어를 개발해 나간다.

		b.Agile 12가지 원칙
			1. 프로토타입을 제공하여 고객을 만족시키는 것이 우선순위이다.
			2. 개발이 늦어지더라도 요구변화 적극 수용
			3. 짧은 주기로 소프트웨어 제공
			4. 비지니스 담당자와 개발자는 프로젝트 전체 기간동안 매일 함께 일해야한다.
			5. 동기부여가 된 개인들 중심으로 프로젝트 구축
			6. 대면대화를 통해 정보 전달 극대화
			7. 작동하는 소프트웨어를 진도 측정의 척도로 한다.
			8. 지속 가능한 개발 속도 유지
			9. 우수한 기술 + 우수한 디자인에 지속적 관심
			10. 단순성은 필수적이다.	
			11. 자기 조직화 팀을 만든다.
			12. 효과적인 방법을 적용해보고, 그에 따라 행동을 조율한다.
		c. Agile 종류
			1.Extreme Programming(XP): 가장 널리 사용되는 Agile 방법
				User stroies for specification(whole team)
					User는 xp팀의 일부이고 요구에 대한 결정에 책임을 져야한다.
				Refactoring(simple design)
					코드의 디자인을 간략화하고 명확화하게하는 것을 강조한다.
					
				test-firsts development(TDD)
					테스트를 거치고 코딩을 하며 프로젝트를 개발해 나간다.
				Pair programming
					두명 혹은 그이상의 프로그래머가 함께 코딩 하는 것을 말한다.
			2.Scrum
				Roles
					product Owner
						스프린트 목표와 제품 backlog를 결정하여 우선순위를 정해준다.
					scrum master
						팀원을 코칭하고 프로젝트의 문제상황을 해결하는 역할
					Development Team
				Events
					Sprint : 반복적인 개발 주기
						한달 정도 동안, 완료 / 사용가능하고 잠재적으로 출시가능한 제품을 만든다.
						새로운 스프린트는 이전 스프린트 종료 직후에 시작된다.
					Sprint Planning Meeting
						스프린트 목표와 스프린트 backlog를 계획하는 회의
					Daily Scrum
						15분정도 이루어지며 time-box를 업데이트하고 다음 24시간 동안의 계획을 짠다.
						장점
							팀과의 의사소통을 향상시킨다.
							다른 미팅을 필요를 없앨 수 있다.
							개발의 계획을 수정할 수 있다.
					Sprint Review 
						한 Sprint가 끝나고 수행된 개발을 정리해서 보여주는 시간이다.
					Sprint Retrospective
						다음 Sprint를 준비하는 단계
				Artifacts
					Project Charter
					Product backlog
						개발할 제품에 대한 요구사항 목록
					Sprint backlog
						각각의 스프린트 목표에 도달하기 위해 필요한 작업 목록
					Burn down chart
6장 요구사항 분석

  1. 요구사항 분석 과정
	a. gathering requirements
		interview
		Joint Application Development(JAD)
		Questionnaires
		Document analysis
		Obervation
	b. refining requirements
		copy existing systems
		Brainstorm
	c. reordering requirements
		UML
		User Stories: 짧고 간결하게 특징만 쓴다.
		Use Cases: 주어진 일을 완료하기 위한 행동의 절차이다.
		Prototypes
		Requirements Specification
	d. validation and verification
		Validation : 어떤 기능이 고객한테 맞느냐
		Verification : 어떤 방법, 구조가 옳냐
	e. Changing requirements
  2. 요구사항 유형
		User requirement : 대략적인 요구
		System requirement: 구체적인 기능 요구
  3. 요구사항을 결정할 때 고려해야 될 점
		functional : 기능적인 측면
		Non-functional: 성능, 사용성, 보안 등
			usability: 사용성, 얼마나 사용자 친화적으로 되어있는지
			reliability: 신뢰성, 장애가 일어났을 때 어떻게 해결되는지
			performanace:성능, 응답시간, 처리율, 정확도, 사용가능성 등
			supportability: 지원성, 다른 환경에서도 지원가능하고 유지보수가 얼마나 쉬운가
		extended requirements
			Design
			implementation
			interface
			physical
  4. 요구사항 분석 전략
	problem analysis
		현재 시스템에서 문제를 유저에게 물어본다.
		user에게 이 문제를 어떻게 해결해줬으면 좋겠는지 물어본다.
	root cause analysis
		문제해결에 초점을 맞추는 것이 아니라 문제 그 자체에 초점을 맞춘다.
		문제 리스트에 우선순위를 만든다
	duration analysis
		사업과정에서 각 단계를 완료하는데 필요한 시간 결정
	Activity-based costing
	informal benchmarking
		다른 성공한 사업의 과정을 분석한다.
7장
	1.용어정리
		Modularization
			전체 프로그램을 한 번에 설계 x 단일 기능을 갖출수 있도록 부분적으로 묶어서 처리하는 기술 like 함수
			장점: 독립적으로 설계할 수 있기 때문에 설계가 용이하다.
			       프로그램 복잡도를 감소시킨다.
		Abstraction
			세부적인 설계를 배제하고 전체 흐름과 구조를 한 눈에 알아볼 수 있도록 개괄적인 설계부터 점차 세부적으로 진행하는 설계 기법
		information hiding
			모듈 간의 관계성을 최소화시키는 설계 기법으로 소프트웨어의 변경을 용이한게한다.
	2.모듈 평가 기준
		결합도(Coupling)을 기준: 두 모듈 간의 관계성의 척도로, 약할수록 좋은 결합이다.
			1. Data coupling(자료 결합도): call by value A모듈에서 B모듈로 데이터를 보내고 B모듈에서 그 데이터를 수정하여도 A모듈에서는 변하지 않는다.
			2. Stamp coupling(구조 결합도): A모듈과 B모듈이 배열과 record를 공유해서 사용
			3. Control coupling(제어 결합도)
			4. Extern coupling(외부 결합도):전역변수
			5. Common coupling(공통 결합도):call by reference 1번과 달리 A모듈에서도 데이터가 변함
			6. Content coupling(내용 결합도): 모듈이 분화되지 않아서 한 모듈이 고장나면 다른 모듈도 같이 고장남
		응집도(Cohesion)을 기준: 한 모듈을 이루고 있는 명령어들이 어느정도의 관령성이 있는가를 말하고, 응집도는 강할수록 좋다
			1. Coincidental Cohesion(우연적 응집도): 라인 등분, 뚜렷한 관계없이 묶인 경우
			2. Logical Cohesion(논리적 응집도): 같은 범주로 묶인 모듈(for{})
			3. Temporal Cohesion(시기적 응집도): 시기적으로 수행시기가 같은 기능끼리 존재 (변수 초기화, 파일 일괄적으로 열기)
			4. Procedural Cohesion(절차적 응집도): 순서를 가지고 있는 모듈 
			5. Commnunication Cohesion(통신적, 정보적 응집도): 작업 대상이 같은 기능끼리
			6. Sequential Cohesion(순차적 응집도): 한 라인의 출력 결과가 다음 라인의 입력에 사용
			7. Functional Cohesion(기능적, 함수적 응집도): sin(), cos(), sqrt() 와 같이 하나의 단일 기능으로 존재하는 경우로 프로그램 언어에서 지원 받는 라이브러리가 여기 포함		
소프트웨어 생명주기(SDLC): 소프트웨어를 개발하는 절차 및 개발 단계의 반복현상
	정의 단계
		타당성 검토
			법적 타당성: 법적으로 타당한지 검토 
			경제적 타당성: 경제적으로 타당한지 검토
			기술적 타당성 : 할 수 있는 기술인지 검토
		프로젝트 계획
			자원, 범위, 비용 측정을 해서 위험성 최소화
			소프트웨어를 개발하기 위해 준비하는 과정
		요구분석
			사용자가 요구하는 것이 무엇인지 알아야한다.
	개발 단계
		설계
			절차구조, 알고리즘, 자료구조 등을 작성하여 프로그램을 쉽게 구현할 수 있도록 준비한는 단계
			자연언어와 프로그램 설계용 언어를 사용
			오류가 가장 많은 단계
		구현
			설계단계에서 작성된 설계문서를 기초로하여 컴퓨터 처리가 가능한 프로그램 언어로 코딩하고 번역하는 단계
		검사
			오류를 찾아 수정하는 단계

	유지보수 단계
		가장 많은 시간과 비용이 투입된다.
		하자보수, 기능개선, 예방조치 등이 있다.
생명주기 역할
	사용자와 개발자 간에 공동 의식을 가질 수 있다.
	소프트웨어 개발의 기본 골격으로 개발 진행의 파악이 용이하다
	개발된 소프트웨어를 관리하기에 용이하다
	용어 및 기술의 표준화를 가능하게 한다.(문서화)
폭포수 모형(waterfall,전통적인) 모형
	
	요구분석 -> 설계 -> 구현 ->검사 -> 유지보수 
	특징
		각 단계가 순차적으로 진행 같이 진행 될 수 없다.
		각 단계에서 완벽하게 검토하도록 한다. (명확성 강조)
프로토타입 모형
	요구분석 -> 프로토타입 -> 설계 -> 구현 -> 검사 -> 유지보수
		요구수집 -> 빠른설계 -> 프로토타입 구축 -> 고객평가 -> 프로토타입 조정 -> 구현
	
	특징
		소프트웨어의 일부를 미리 제작하여 사용자의 요구를 정확히 받아들이는 방법이다
		요구사항의 변경이 용이하다
		요구분석 중심의 개발 방법론이다.
		최종 결과물이 나오기 전에 의뢰자가 최종 결과물의 일부 또는 모형을 볼 수 있다.
		오류 수정이 용이하다.
	적용 방법
		문서형 프로토타입
		작업 프로토타입
		프로그램 프로토타입
	brooks 이론
		개발 일정이 지연된다고 해서 말기에 새로운 인원을 투입하며 일정이 더욱 지연된다.
Agile 
	과거의 방법론과는 다르게 앞을 예측하며 개발을 하지 않고, 일정한 주기를 가지고 끊임없이 프로토 타입을 만들어 내며
	그때 그때 필요한 요구를 더하고 수정하여 하나의 커다란 소프트웨어를 개발해 나간다
	plan-driven VS Agile development
		plan- driven 
			결과가 각 단계의 계획에 따라 산출된다
		Agile
			결과가 소프트웨어 개발 과정 동안에 협상을 통해 산출된다
Agile 12가지 원칙
	1. 소프트웨어를 초기부터 지속적으로 제공함으로써 고객을 만족시키는 것이 가장 우선순이이다.
	2. 개발이 늦어지더라고 요구변화를 적극적으로 수용해야한다.
	3. 짧은 주기로 소프트웨어를 제공해야한다.
	4. 비지니스 담당자와 개발자는 프로젝트 전체 기간동안 매일 함께 일해야한다.
	5. 동기가 부여된 개인들 중심으로 프로젝트를 구축한다.
	6. 개발팀에 정보를 전달하는 가장 효율적이고 효과적인 방법은 대면 대화이다.
	7. 작동하는 소프트웨어가 진도 측정의 주요 척도이다.
	8. 지속 가능한 개발 속도 유지
	9. 우수한 기술과 우수한 디자인에 대한 지속적인 관심을 가져야 한다.
	10. 단순성은 필수적이다
	11. 최고의 아키텍처, 요구사항 및 디자인은 자기 조직화 팀에서 나온다.
	12. 정기적으로 효과적인 방법을 적용해보고, 그에 따라 행동을 조율한다.

Agile 종류
	Extreme Programming(XP) : 가장 널리 사용되는 Agile방법이다
		실천방법
			User stroies for specification
				고객은 xp팀의 일부이고 요구에 대한 결정에 책임을 져야한다.
				개발팀이 구현해야할 일이 쓰여진 카드가 있다. 이러한 일들은 스케줄과 비용의 근거가 된다.
				
			Refactoring
				변화없이 존재하는 코드의 디자인을 간략화하고 명확화하는 프로세스를 뜻한다.
				코드의 개선작업, 조직화, 효율화를 뜻한다.	
			test-firsts(driven) development (TDD)
				테스트를 기반으로한 개발은 Xp에서 가장 중요한 실천 방안중 하나이다. 
				테스트를 거치고 코딩을 하며 프로젝트를 개발해 나간다.
			Pair programming
				두명 혹은 그 이상의 프로그래머가 함께 코딩을 하는 것을 말한다.
	Scrum: 프로젝트 관리를 위한 상호, 점진적 개발방법론
		Scrum Framework
			Roles
				Product Owner
					스프린트 목표와 제품 백 로그를 결정하여 우선순위를 정해준다.
				Scrum Master
					팀원을 코칭하고 프로젝트의 문제상황을 해결하는 역할
				Development Team
			Events
				Sprint : 반복적인 개발 주기
					한달 혹은 2~4주 정도 동안, 완료/ 사용가능하고 잠재적으로 출시 가능한 제품을 만든다.
					새로운 스프린트는 이전 스프린트 종료 직후에 시작된다.
				Sprint Planning Meeting
					스프린트 목표와 스프린트 백로그를 계획하는 회의
				Daily Scrum
					15분정도 이루어지며 time-box를 업데이트하고 다음 24시간 동안의 계획을 짠다.
					장점: 팀 멤버의 의사소통을 향상시킨다
					       다른 미팅을 필요를 없앨 수 있다
				 	       개발의 계획을 수정할 수 있다.
				Sprint Review
					Sprint 동안에 수행된 개발을 정리해서 보여주는 시간이다
				Sprint Retrospective
					다음 Sprint를 준비하는 단계이다
			Artifacts
				Project Charter
				Product Backlog
					개발할 제품에 대한 요구사항 목록
				Sprint Backlog
					각각의 스프린트 목표에 도달하기 위해 필요한 작업 목록
				Burn down chart
	

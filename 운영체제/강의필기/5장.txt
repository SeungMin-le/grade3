5장 동시성 상호배제 동기화

atomic operation : 더 이상 쪼갤 수 없는 operation 이 부분은 context switching이 되지 않도록 보호해야한다.
		bal++   bal의 변수가 저장된 메모리를 보호하는 것이 아니라 그 메모리를 사용하는 코드(crytical section)를 보호한다
		r3<--bal
		r3<--bal+1 critical section 이 부분을 atomic operation으로 만들어 줘야함
		bal<--1r3

Mutual Exclusion : 하나의 process가 하나의 resource를 독점하도록 보장하는 것
	방법
		1.Interrupt Disabling : critical section 부분이 있으면 interrupt를 끈다. (너무 단순무식함 시스템 전체에 영향을 줌)
		2.Semaphore
	요구사항 
		1. deadlock, starvation이 일어나면 안됨
		2. critical section에 들어갔으면 언젠가 나와야함 
Semaphore hardware support
	 compare & swap Instruction 읽는 동시에 1을 0으로 바로 저장		
Semaphore: resource가 사용 중이라는 것을 알려주는 방법(사용가능:1 불가능:0)
	initialize
	wait : critical section 진입할 때
	signal: critical section 끝날 때
	ppt 24 , 25 설명
Synchronization: 서로 다른 process가 번갈아가며 진행할 때 필요
race condition : 경쟁 상태 resource는 한정되어 있는데 서로 가지려고 경쟁
starvation:

principles of Concurrency
	time Quantum이 다되서 쉬고 있는 상탠데 다른 process가 쉬고 있는 process의 resource를 원할 때 기다려줘야한다.

Difficulties of Concurrency
	error가 많이 난다. 재현이 안되서 error를 잡기 어렵다.
	OS가 자원할당을 관리하는 것은 매우 어렵다.

Resource Competition
	mutual exclusion이 필요하다
	deadlock이 발생되면 안된다.
	starvation이 안 생기고 언젠가 실행되어야한다.
producer / consumer problem 
	buffer에 접근 하는 코드(critical section)가 보호되어야 한다. (Mutual Exclusion)
	buffer가 꽉차면 producer는 쓰는 것을 멈추고 consumer가 버퍼의 데이터를 비워주고 producer를 풀어준다.
	buffer가 비어 있으면 consumer는 가져가는 것을 멈추고 producer가 써준뒤 consumer를 풀어준다.
ppt 29 코드
	append() 버퍼 쓰기
	n++			<--critical section
	take() 버퍼비우기
	n--;			<-- critical section
	consume()에 if 문 오류, 뒤에서 해결 변수하나 다시 만들어서 n을 저장
ppt 34 완성 코드
	s는 mutual exclusion	n = synchronization e= synchronization
semaphore 구현
	semWait and semSignal operation을 사용한다.
Readeres / writers problem
	1.Reader는 데이터 일관성에 영향을 끼치지 않아서 한 번에 여러 명이 읽어도 상관없지만 
	2.writer는 한 번에 한놈만 써야한다.
	3.쓸 때는 아무도 안 읽고 안 쓰고 있어야 한다.(쓰는 부분 => critical section)
ppt 57
	readcount++
	if(readcount ==1) semWait(wsem);<-- CS
ppt 59
	WRITEUNIT() 세마포로 보호 
